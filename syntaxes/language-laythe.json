{
  "version": "",
  "name": "Laythe",
  "scopeName": "source.lay",
  "fileTypes": ["lay"],
  "patterns": [
    {
      "include": "#top"
    }
  ],
  "repository": {
    "top": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#string"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#class-declaration"
        },
        {
          "include": "#fn-declaration"
        },
        {
          "include": "#let-declaration"
        },
        {
          "include": "#let-nil-declaration"
        },
        {
          "include": "#trait-declaration"
        },
        {
          "include": "#type-declaration"
        },
        {
          "include": "#statement"
        }
      ]
    },
    "class-declaration": {
      "name": "meta.class.lay",
      "begin": "(?:\\b(export)\\s+)?\\b(class)\\s+([_[:alpha:]][_[:alnum:]]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.lay"
        },
        "2": {
          "name": "storage.type.class.lay"
        },
        "3": {
          "name": "meta.definition.class.lay entity.name.class.lay"
        },
        "4": {
          "name": "meta.definition.class.lay entity.name.class.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#punctuation-colon"
        },
        {
          "include": "#type"
        },
        {
          "include": "#class-body"
        }
      ]
    },
    "class-body": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-member"
        },
        {
          "include": "#method"
        },
        {
          "include": "#punctuation-arrow"
        },
        {
          "include": "#type"
        }
      ]
    },
    "method": {
      "name": "meta.method.lay",
      "begin": "\\b(?:(static)\\s+)?([_[:alpha:]][_[:alnum:]]*)\\s*(?=(\\(|<))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.static.lay"
        },
        "2": {
          "name": "entity.name.function.lay"
        }
      },
      "end": "(?<=(;|\\}))",
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "include": "#call-signature"
        },
        {
          "include": "#block"
        },
        {
          "include": "#punctuation-arrow"
        },
        {
          "include": "#type"
        }
      ]
    },
    "fn-declaration": {
      "name": "meta.declaration.function.lay",
      "begin": "(?:\\b(export)\\s+)?\\b(fn)\\s+([_[:alpha:]][_[:alnum:]]*)\\s*(?=(\\(|<))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.lay"
        },
        "2": {
          "name": "storage.type.function.lay"
        },
        "3": {
          "name": "meta.definition.function.lay entity.name.function.lay"
        }
      },
      "end": "(?<=(;|\\}))",
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "include": "#call-signature"
        },
        {
          "include": "#block"
        },
        {
          "include": "#punctuation-arrow"
        },
        {
          "include": "#type"
        }
      ]
    },
    "let-declaration": {
      "name": "meta.declaration.variable.lay",
      "begin": "(?:\\b(export)\\s+)?(let)\\s+([_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.lay"
        },
        "2": {
          "name": "keyword.declaration.variable.lay"
        },
        "3": {
          "name": "entity.name.variable"
        }
      },
      "end": ";",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.lay"
        }
      },
      "patterns": [
        {
          "include": "#white-space"
        },
        {
          "include": "#punctuation-assignment"
        },
        {
          "include": "#let-type-declaration"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "let-type-declaration": {
      "name": "meta.declaration.variable.type.lay",
      "begin": ":",
      "beginCaptures": {
        "0": {
          "name": "punctuation.separator.colon.lay"
        }
      },
      "end": "(=|;)",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "trait-declaration": {
      "name": "meta.declaration.trait",
      "begin": "(?:\\b(export)\\s+)?(trait)\\s+([_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.lay"
        },
        "2": {
          "name": "keyword.declaration.trait.lay"
        },
        "3": {
          "name": "entity.name.type.interface.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#trait-body"
        },
        {
          "include": "#type-parameters"
        }
      ]
    },
    "trait-body": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.lay"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#type-member"
        },
        {
          "include": "#type-method"
        }
      ]
    },
    "type-declaration": {
      "name": "meta.declaration.type",
      "begin": "(?:\\b(export)\\s+)?(type)\\s+([_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.lay"
        },
        "2": {
          "name": "keyword.declaration.type.lay"
        },
        "3": {
          "name": "entity.name.type"
        }
      },
      "end": ";",
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-assignment"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#import"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#launch"
        },
        {
          "include": "#raise"
        },
        {
          "include": "#block"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "import": {
      "name": "meta.import.lay",
      "begin": "\\bimport\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.import.lay"
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.lay"
        }
      },
      "patterns": [
        {
          "include": "#import-rename"
        },
        {
          "include": "#module-symbols"
        },
        {
          "include": "#module-accessor"
        },
        {
          "include": "#module"
        }
      ]
    },
    "module": {
      "name": "variable.other.identifier.lay",
      "match": "([_[:alpha:]][_[:alnum:]]*)"
    },
    "module-accessor": {
      "name": "entity.module.accessor.lay",
      "match": "([_[:alpha:]][_[:alnum:]]*)(\\.)",
      "captures": {
        "1": {
          "name": "entity.module.lay"
        },
        "2": {
          "name": "punctuation.accessor.get.lay"
        }
      }
    },
    "module-symbols": {
      "name": "meta.import.symbols.lay",
      "begin": "([_[:alpha:]][_[:alnum:]]*):\\{",
      "beginCaptures": {
        "1": {
          "name": "entity.module.lay"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#import-rename"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "import-rename": {
      "name": "keyword.other.import.lay",
      "match": "(?<![_[:alnum:]\\:])(as)(?![_[:alnum:]\\:])"
    },
    "control-statement": {
      "patterns": [
        {
          "include": "#for"
        },
        {
          "include": "#while"
        },
        {
          "include": "#if"
        },
        {
          "include": "#else"
        },
        {
          "include": "#try"
        },
        {
          "include": "#catch"
        },
        {
          "include": "#return"
        },
        {
          "include": "#break"
        },
        {
          "include": "#continue"
        }
      ]
    },
    "for": {
      "name": "meta.loop.for.lay",
      "begin": "\\b(for)\\s+([_[:alpha:]][_[:alnum:]]*)\\s+(in)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.lay"
        },
        "2": {
          "name": "entity.name.variable"
        },
        "3": {
          "name": "keyword.control.loop.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#block"
        }
      ]
    },
    "while": {
      "name": "meta.loop.while.lay",
      "begin": "\\bwhile\\s*",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.loop.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#block"
        }
      ]
    },
    "if": {
      "name": "meta.condition.if.lay",
      "begin": "\\b(if)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.condition.if.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#block"
        }
      ]
    },
    "else": {
      "name": "meta.condition.else.lay",
      "begin": "\\b(else)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.condition.else.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#if"
        },
        {
          "include": "#block"
        }
      ]
    },
    "try": {
      "name": "meta.condition.try.lay",
      "begin": "\\btry\\s*",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.condition.try.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#block"
        }
      ]
    },
    "catch": {
      "name": "meta.condition.catch.lay",
      "begin": "\\bcatch\\s*",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.condition.catch.lay"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#block"
        }
      ]
    },
    "return": {
      "name": "meta.return.lay",
      "begin": "(?<![_[:alnum:]\\:])(return)(?![_[:alnum:]\\:])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.return.lay"
        }
      },
      "end": ";",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.statement.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "break": {
      "name": "meta.break.lay",
      "match": "(?<![_[:alnum:]\\:])break",
      "captures": {
        "0": {
          "name": "keyword.control.break.lay"
        }
      }
    },
    "continue": {
      "name": "meta.continue.lay",
      "match": "(?<![_[:alnum:]\\:])continue",
      "captures": {
        "0": {
          "name": "keyword.control.continue.lay"
        }
      }
    },
    "launch": {
      "name": "meta.launch.lay",
      "begin": "\\b(launch)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.launch.lay"
        }
      },
      "end": "\\;",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "raise": {
      "name": "meta.raise.lay",
      "begin": "\\b(raise)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.raise.lay"
        }
      },
      "end": "\\;",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "block": {
      "name": "meta.block.lay",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.lay"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#declaration"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.conditional.lay",
          "match": "(?<![_[:alnum:]\\:])(else|if)(?![_[:alnum:]\\:])"
        },
        {
          "name": "keyword.control.loop.lay",
          "match": "(?<![_[:alnum:]\\:])(for|in|while|continue|break)(?![_[:alnum:]\\:])"
        },
        {
          "name": "keyword.control.exception.lay",
          "match": "(?<![_[:alnum:]\\:])(try|catch)(?![_[:alnum:]\\:])"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#chain"
        },
        {
          "include": "#block"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.other.logical.lay",
          "match": "\\b(or|and)\\b"
        },
        {
          "name": "keyword.operator.assignment.lay",
          "match": "="
        },
        {
          "name": "keyword.operator.assignment.arithmetic.lay",
          "match": "\\*=|/=|-=|\\+="
        },
        {
          "name": "keyword.operator.comparison.lay",
          "match": "<=|>=|<|>|!=|=="
        },
        {
          "name": "keyword.operator.channel.lay",
          "match": "<-"
        },
        {
          "name": "keyword.operator.arithmetic.lay",
          "match": "\\*|/|-|\\+"
        }
      ]
    },
    "chain": {
      "patterns": [
        {
          "include": "#init"
        },
        {
          "include": "#call"
        },
        {
          "include": "#primary"
        },
        {
          "include": "#identifier-accessor"
        }
      ]
    },
    "init": {
      "name": "meta.init.lay",
      "begin": "([_[:upper:]][_[:alnum:]]*)\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.lay"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression-list"
        }
      ]
    },
    "call": {
      "name": "meta.call.lay",
      "begin": "(\\.)?([_[:alpha:]][_[:alnum:]]*)\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "punctuation.accessor.get.lay"
        },
        "2": {
          "name": "entity.name.function.lay"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression-list"
        }
      ]
    },
    "primary": {
      "patterns": [
        {
          "include": "#literal"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#lambda"
        },
        {
          "include": "#grouping"
        }
      ]
    },
    "parameters": {
      "name": "meta.declaration.parameters",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#expression-list"
        }
      ]
    },
    "call-signature": {
      "name": "meta.declaration.callSignature.lay",
      "begin": "\\(",
      "beginCaptures": {
        "0": "punctuation.section.parens.begin.lay"
      },
      "end": "\\)",
      "endCaptures": {
        "0": "punctuation.section.parens.end.lay"
      },
      "patterns": [
        {
          "include": "#parameter-typed"
        },
        {
          "include": "#parameter"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "parameter-typed": {
      "begin": "([_[:alpha:]][_[:alnum:]]*)\\s*(:)\\s*",
      "beginCaptures": {
        "1": {
          "name": "variable.parameter.lay"
        },
        "2": {
          "name": "punctuation.separator.colon.lay"
        }
      },
      "end": "(?=(,|\\)|\\|))",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "parameter": {
      "name": "variable.parameter.lay",
      "match": "[_[:alpha:]][_[:alnum:]]*"
    },
    "arguments": {
      "name": "meta.arguments",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#expression-list"
        }
      ]
    },
    "expression-list": {
      "patterns": [
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#true"
        },
        {
          "include": "#false"
        },
        {
          "include": "#nil"
        },
        {
          "include": "#self"
        },
        {
          "include": "#super"
        },
        {
          "include": "#number"
        }
      ]
    },
    "identifier-accessor": {
      "name": "variable.other.accessor.lay",
      "match": "(\\.)([_[:alpha:]][_[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "punctuation.accessor.get.lay"
        },
        "2": {
          "name": "variable.other.member"
        }
      }
    },
    "identifier": {
      "name": "variable.other.identifier.lay",
      "match": "\\b([_[:alpha:]][_[:alnum:]]*)"
    },
    "grouping": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.lay"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "lambda": {
      "name": "meta.declaration.lambda.lay",
      "begin": "\\|",
      "end": "\\|",
      "patterns": [
        {
          "include": "#punctuation-pipe"
        },
        {
          "include": "#expression-list"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#string-single"
        },
        {
          "include": "#string-double"
        }
      ]
    },
    "string-single": {
      "name": "string.lay",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.lay"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#escape-unicode"
        },
        {
          "include": "#escape-sequence"
        },
        {
          "include": "#template-expression"
        }
      ]
    },
    "string-double": {
      "name": "string.lay",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.lay"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#escape-unicode"
        },
        {
          "include": "#escape-sequence"
        },
        {
          "include": "#template-expression"
        }
      ]
    },
    "template-expression": {
      "name": "meta.template.expression.lay",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.lay"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.lay"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "escape-sequence": {
      "name": "constant.character.escape",
      "match": "\\\\."
    },
    "escape-unicode": {
      "name": "constant.character.escape",
      "match": "(\\\\u)\\{([0-9a-fA-F]{2,6})\\}",
      "captures": {
        "1": {
          "name": "constant.character.escape"
        },
        "2": {
          "name": "constant.numeric.integer.hexadecimal"
        }
      }
    },
    "comment": {
      "name": "comment.line.double-slash.lay",
      "begin": "(^[ \\t]+)?(//)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.lay"
        },
        "2": {
          "name": "comment.line.double-slash.lay"
        }
      },
      "contentName": "comment.line.comment.lay",
      "end": "\\n"
    },
    "number": {
      "name": "constant.numeric.float.lay",
      "match": "-?(?:0|[1-9](?:[0-9_]*[0-9])?)(?:\\.[0-9](?:[0-9_]*[0-9])?)?(?:[eE][+\\-]?[0-9](?:[0-9_]*[0-9])?)?"
    },
    "self": {
      "name": "variable.language.self.lay",
      "match": "\\bself(?![_[:alnum:]\\:])"
    },
    "super": {
      "name": "variable.language.super.lay",
      "match": "\\bsuper(?![_[:alnum:]\\:])"
    },
    "true": {
      "name": "constant.language.true.lay",
      "match": "\\btrue(?![_[:alnum:]\\:])"
    },
    "false": {
      "name": "constant.language.false.lay",
      "match": "\\bfalse(?![_[:alnum:]\\:])"
    },
    "nil": {
      "name": "constant.language.nil.lay",
      "match": "\\bnil(?![_[:alnum:]\\:])"
    },
    "white-space": {
      "name": "punctuation.separator.whitespace.lay",
      "match": "\\s"
    },
    "punctuation-pipe": {
      "name": "punctuation.lambda.pipe.lay",
      "match": "\\|"
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.lay",
      "match": "\\,"
    },
    "punctuation-arrow": {
      "name": "storage.type.function.arrow.lay",
      "match": "->"
    },
    "punctuation-period": {
      "name": "punctuation.accessor.period.lay",
      "match": "\\,"
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.lay",
      "match": "\\;"
    },
    "punctuation-colon": {
      "name": "punctuation.separator.colon.lay",
      "match": ":"
    },
    "punctuation-assignment": {
      "name": "keyword.operator.assignment.lay",
      "match": "="
    },
    "type-member": {
      "begin": "\\b([_[:alpha:]][_[:alnum:]]*)\\s*(:)\\s*",
      "beginCaptures": {
        "1": {
          "name": "variable.other.member.lay"
        },
        "2": {
          "name": "punctuation.separator.lay"
        }
      },
      "end": ";",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },

    "type-method": {
      "begin": "\\b([_[:alpha:]][_[:alnum:]]*)\\s*(?=(<|\\())",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.lay"
        }
      },
      "end": ";",
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "include": "#call-signature"
        },
        {
          "include": "#punctuation-arrow"
        },
        {
          "include": "#type"
        }
      ]
    },
    "type-parameters": {
      "name": "meta.generic.lay",
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.generic.begin.lay"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.generic.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#type-parameter"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "type-arguments": {
      "name": "meta.generic.lay",
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.generic.begin.lay"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.generic.end.lay"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#type"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "type-parameter": {
      "name": "meta.type.parameter",
      "begin": "\\b([_[:alpha:]][_[:alnum:]]*)(?:\\s*:\\s*)?",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.parameter.lay"
        }
      },
      "end": "(?=(,|>))",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-operators"
        },
        {
          "include": "#punctuation-arrow"
        },
        {
          "include": "#type-arguments"
        },
        {
          "include": "#call-signature"
        },
        {
          "include": "#type-predefined"
        },
        {
          "include": "#type-ref"
        },
        {
          "include": "#white-space"
        }
      ]
    },
    "type-operators": {
      "patterns": [
        {
          "name": "keyword.operator.union.lay",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.intersection.lay",
          "match": "&"
        }
      ]
    },
    "type-ref": {
      "name": "entity.name.type.ref.lay",
      "match": "\\b([_[:alpha:]][_[:alnum:]]*)"
    },
    "type-predefined": {
      "name": "entity.name.type.predefined.lay",
      "match": "\\b(nil|number|bool|string|any)(?![_[:alnum:]\\:])"
    }
  }
}
